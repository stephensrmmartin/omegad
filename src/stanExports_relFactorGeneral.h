// Generated by rstantools.  Do not edit by hand.

/*
    omegad is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    omegad is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with omegad.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_relFactorGeneral_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_relFactorGeneral");
    reader.add_event(153, 151, "end", "model_relFactorGeneral");
    return reader;
}
template <typename T0__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
omega_one(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& lambda_loc_mat,
              const std::vector<std::vector<int> >& F_inds,
              const std::vector<int>& F_inds_num,
              const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& shat, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(shat));
        current_statement_begin__ = 5;
        int F(0);
        (void) F;  // dummy to suppress unused var warning
        stan::math::fill(F, std::numeric_limits<int>::min());
        stan::math::assign(F,rows(lambda_loc_mat));
        current_statement_begin__ = 6;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,cols(shat));
        current_statement_begin__ = 7;
        validate_non_negative_index("vhat", "N", N);
        validate_non_negative_index("vhat", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> vhat(N, J);
        stan::math::initialize(vhat, DUMMY_VAR__);
        stan::math::fill(vhat, DUMMY_VAR__);
        stan::math::assign(vhat,elt_multiply(shat, shat));
        current_statement_begin__ = 8;
        validate_non_negative_index("vhat_sum", "N", N);
        validate_non_negative_index("vhat_sum", "F", F);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> vhat_sum(N, F);
        stan::math::initialize(vhat_sum, DUMMY_VAR__);
        stan::math::fill(vhat_sum, DUMMY_VAR__);
        current_statement_begin__ = 9;
        validate_non_negative_index("numerator", "F", F);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> numerator(F);
        stan::math::initialize(numerator, DUMMY_VAR__);
        stan::math::fill(numerator, DUMMY_VAR__);
        current_statement_begin__ = 10;
        validate_non_negative_index("omega", "N", N);
        validate_non_negative_index("omega", "F", F);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> omega(N, F);
        stan::math::initialize(omega, DUMMY_VAR__);
        stan::math::fill(omega, DUMMY_VAR__);
        current_statement_begin__ = 11;
        for (int f = 1; f <= F; ++f) {
            current_statement_begin__ = 12;
            stan::model::assign(vhat_sum, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                        multiply(stan::model::rvalue(vhat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), "vhat"), rep_vector(1, get_base1(F_inds_num, f, "F_inds_num", 1))), 
                        "assigning variable vhat_sum");
            current_statement_begin__ = 13;
            stan::model::assign(numerator, 
                        stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list()), 
                        pow(sum(stan::model::rvalue(lambda_loc_mat, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_loc_mat")), 2), 
                        "assigning variable numerator");
            current_statement_begin__ = 14;
            stan::model::assign(omega, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                        elt_divide(get_base1(numerator, f, "numerator", 1), add(get_base1(numerator, f, "numerator", 1), stan::model::rvalue(vhat_sum, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), "vhat_sum"))), 
                        "assigning variable omega");
        }
        current_statement_begin__ = 16;
        return stan::math::promote_scalar<fun_return_scalar_t__>(omega);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct omega_one_functor__ {
    template <typename T0__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T3__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& lambda_loc_mat,
              const std::vector<std::vector<int> >& F_inds,
              const std::vector<int>& F_inds_num,
              const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& shat, std::ostream* pstream__) const {
        return omega_one(lambda_loc_mat, F_inds, F_inds_num, shat, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
loadings_to_ones(const std::vector<std::vector<int> >& F_inds,
                     const std::vector<int>& F_inds_num, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 22;
        int F(0);
        (void) F;  // dummy to suppress unused var warning
        stan::math::fill(F, std::numeric_limits<int>::min());
        stan::math::assign(F,size(F_inds));
        current_statement_begin__ = 23;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,size(get_base1(F_inds, 1, "F_inds", 1)));
        current_statement_begin__ = 24;
        validate_non_negative_index("lambda_ones", "F", F);
        validate_non_negative_index("lambda_ones", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda_ones(F, J);
        stan::math::initialize(lambda_ones, DUMMY_VAR__);
        stan::math::fill(lambda_ones, DUMMY_VAR__);
        current_statement_begin__ = 25;
        for (int f = 1; f <= F; ++f) {
            current_statement_begin__ = 26;
            for (int j = 1; j <= J; ++j) {
                current_statement_begin__ = 27;
                stan::model::assign(lambda_ones, 
                            stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            0, 
                            "assigning variable lambda_ones");
            }
            current_statement_begin__ = 29;
            stan::model::assign(lambda_ones, 
                        stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), 
                        rep_row_vector(1, get_base1(F_inds_num, f, "F_inds_num", 1)), 
                        "assigning variable lambda_ones");
        }
        current_statement_begin__ = 31;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lambda_ones);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct loadings_to_ones_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const std::vector<std::vector<int> >& F_inds,
                     const std::vector<int>& F_inds_num, std::ostream* pstream__) const {
        return loadings_to_ones(F_inds, F_inds_num, pstream__);
    }
};
Eigen::Matrix<double, Eigen::Dynamic, 1>
ones(const int& num, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 35;
        validate_non_negative_index("ones", "num", num);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ones(num);
        stan::math::initialize(ones, DUMMY_VAR__);
        stan::math::fill(ones, DUMMY_VAR__);
        current_statement_begin__ = 36;
        for (int n = 1; n <= num; ++n) {
            current_statement_begin__ = 37;
            stan::model::assign(ones, 
                        stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                        1, 
                        "assigning variable ones");
        }
        current_statement_begin__ = 39;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ones);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct ones_functor__ {
            Eigen::Matrix<double, Eigen::Dynamic, 1>
    operator()(const int& num, std::ostream* pstream__) const {
        return ones(num, pstream__);
    }
};
template <typename T0__, typename T3__, typename T4__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T3__, T4__>::type, Eigen::Dynamic, Eigen::Dynamic>
omega_two(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& lambda_loc_mat,
              const std::vector<std::vector<int> >& F_inds,
              const std::vector<int>& F_inds_num,
              const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& theta_cor_L,
              const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& shat, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T3__, T4__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        int N(0);
        (void) N;  // dummy to suppress unused var warning
        stan::math::fill(N, std::numeric_limits<int>::min());
        stan::math::assign(N,rows(shat));
        current_statement_begin__ = 45;
        int F(0);
        (void) F;  // dummy to suppress unused var warning
        stan::math::fill(F, std::numeric_limits<int>::min());
        stan::math::assign(F,rows(lambda_loc_mat));
        current_statement_begin__ = 46;
        int J(0);
        (void) J;  // dummy to suppress unused var warning
        stan::math::fill(J, std::numeric_limits<int>::min());
        stan::math::assign(J,cols(shat));
        current_statement_begin__ = 47;
        validate_non_negative_index("vhat", "N", N);
        validate_non_negative_index("vhat", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> vhat(N, J);
        stan::math::initialize(vhat, DUMMY_VAR__);
        stan::math::fill(vhat, DUMMY_VAR__);
        stan::math::assign(vhat,elt_multiply(shat, shat));
        current_statement_begin__ = 48;
        validate_non_negative_index("theta_cov", "(F * 2)", (F * 2));
        validate_non_negative_index("theta_cov", "(F * 2)", (F * 2));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta_cov((F * 2), (F * 2));
        stan::math::initialize(theta_cov, DUMMY_VAR__);
        stan::math::fill(theta_cov, DUMMY_VAR__);
        stan::math::assign(theta_cov,multiply_lower_tri_self_transpose(theta_cor_L));
        current_statement_begin__ = 49;
        validate_non_negative_index("theta_loc_cov", "F", F);
        validate_non_negative_index("theta_loc_cov", "F", F);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta_loc_cov(F, F);
        stan::math::initialize(theta_loc_cov, DUMMY_VAR__);
        stan::math::fill(theta_loc_cov, DUMMY_VAR__);
        stan::math::assign(theta_loc_cov,stan::model::rvalue(theta_cov, stan::model::cons_list(stan::model::index_min_max(1, F), stan::model::cons_list(stan::model::index_min_max(1, F), stan::model::nil_index_list())), "theta_cov"));
        current_statement_begin__ = 50;
        validate_non_negative_index("implied_cov_fixed", "J", J);
        validate_non_negative_index("implied_cov_fixed", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> implied_cov_fixed(J, J);
        stan::math::initialize(implied_cov_fixed, DUMMY_VAR__);
        stan::math::fill(implied_cov_fixed, DUMMY_VAR__);
        stan::math::assign(implied_cov_fixed,multiply(multiply(transpose(lambda_loc_mat), theta_loc_cov), lambda_loc_mat));
        current_statement_begin__ = 51;
        validate_non_negative_index("lambda_ones", "F", F);
        validate_non_negative_index("lambda_ones", "J", J);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda_ones(F, J);
        stan::math::initialize(lambda_ones, DUMMY_VAR__);
        stan::math::fill(lambda_ones, DUMMY_VAR__);
        stan::math::assign(lambda_ones,loadings_to_ones(F_inds, F_inds_num, pstream__));
        current_statement_begin__ = 52;
        validate_non_negative_index("numerator", "F", F);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> numerator(F);
        stan::math::initialize(numerator, DUMMY_VAR__);
        stan::math::fill(numerator, DUMMY_VAR__);
        current_statement_begin__ = 53;
        validate_non_negative_index("omega", "N", N);
        validate_non_negative_index("omega", "F", F);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> omega(N, F);
        stan::math::initialize(omega, DUMMY_VAR__);
        stan::math::fill(omega, DUMMY_VAR__);
        current_statement_begin__ = 54;
        for (int f = 1; f <= F; ++f) {
            current_statement_begin__ = 55;
            stan::model::assign(numerator, 
                        stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list()), 
                        pow(sum(stan::model::rvalue(lambda_loc_mat, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "lambda_loc_mat")), 2), 
                        "assigning variable numerator");
            current_statement_begin__ = 56;
            stan::model::assign(omega, 
                        stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list())), 
                        elt_divide(get_base1(numerator, f, "numerator", 1), add(multiply(multiply(get_base1(lambda_ones, f, "lambda_ones", 1), implied_cov_fixed), transpose(get_base1(lambda_ones, f, "lambda_ones", 1))), multiply(stan::model::rvalue(vhat, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), "vhat"), ones(get_base1(F_inds_num, f, "F_inds_num", 1), pstream__)))), 
                        "assigning variable omega");
        }
        current_statement_begin__ = 58;
        return stan::math::promote_scalar<fun_return_scalar_t__>(omega);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct omega_two_functor__ {
    template <typename T0__, typename T3__, typename T4__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T3__, T4__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& lambda_loc_mat,
              const std::vector<std::vector<int> >& F_inds,
              const std::vector<int>& F_inds_num,
              const Eigen::Matrix<T3__, Eigen::Dynamic, Eigen::Dynamic>& theta_cor_L,
              const Eigen::Matrix<T4__, Eigen::Dynamic, Eigen::Dynamic>& shat, std::ostream* pstream__) const {
        return omega_two(lambda_loc_mat, F_inds, F_inds_num, theta_cor_L, shat, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_relFactorGeneral : public prob_grad {
private:
        int N;
        int J;
        int F;
        std::vector<std::vector<int> > F_inds;
        matrix_d x;
        std::vector<int> F_inds_num;
        int N_loadings;
public:
    model_relFactorGeneral(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_relFactorGeneral(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_relFactorGeneral_namespace::model_relFactorGeneral";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 63;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 64;
            context__.validate_dims("data initialization", "J", "int", context__.to_vec());
            J = int(0);
            vals_i__ = context__.vals_i("J");
            pos__ = 0;
            J = vals_i__[pos__++];
            current_statement_begin__ = 65;
            context__.validate_dims("data initialization", "F", "int", context__.to_vec());
            F = int(0);
            vals_i__ = context__.vals_i("F");
            pos__ = 0;
            F = vals_i__[pos__++];
            current_statement_begin__ = 66;
            validate_non_negative_index("F_inds", "F", F);
            validate_non_negative_index("F_inds", "J", J);
            context__.validate_dims("data initialization", "F_inds", "int", context__.to_vec(F,J));
            F_inds = std::vector<std::vector<int> >(F, std::vector<int>(J, int(0)));
            vals_i__ = context__.vals_i("F_inds");
            pos__ = 0;
            size_t F_inds_k_0_max__ = F;
            size_t F_inds_k_1_max__ = J;
            for (size_t k_1__ = 0; k_1__ < F_inds_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < F_inds_k_0_max__; ++k_0__) {
                    F_inds[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 68;
            validate_non_negative_index("x", "N", N);
            validate_non_negative_index("x", "J", J);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(N,J));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, J);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = J;
            size_t x_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            current_statement_begin__ = 73;
            validate_non_negative_index("F_inds_num", "F", F);
            F_inds_num = std::vector<int>(F, int(0));
            stan::math::fill(F_inds_num, std::numeric_limits<int>::min());
            current_statement_begin__ = 74;
            N_loadings = int(0);
            stan::math::fill(N_loadings, std::numeric_limits<int>::min());
            // execute transformed data statements
            current_statement_begin__ = 75;
            for (int f = 1; f <= F; ++f) {
                current_statement_begin__ = 76;
                stan::model::assign(F_inds_num, 
                            stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list()), 
                            0, 
                            "assigning variable F_inds_num");
                current_statement_begin__ = 77;
                for (int j = 1; j <= J; ++j) {
                    current_statement_begin__ = 78;
                    if (as_bool(logical_neq(get_base1(get_base1(F_inds, f, "F_inds", 1), j, "F_inds", 2), 0))) {
                        current_statement_begin__ = 79;
                        stan::model::assign(F_inds_num, 
                                    stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list()), 
                                    (stan::model::rvalue(F_inds_num, stan::model::cons_list(stan::model::index_uni(f), stan::model::nil_index_list()), "F_inds_num") + 1), 
                                    "assigning variable F_inds_num");
                    }
                }
            }
            current_statement_begin__ = 83;
            stan::math::assign(N_loadings, sum(F_inds_num));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 90;
            validate_non_negative_index("lambda_loc", "N_loadings", N_loadings);
            num_params_r__ += N_loadings;
            current_statement_begin__ = 91;
            validate_non_negative_index("lambda_sca", "N_loadings", N_loadings);
            num_params_r__ += N_loadings;
            current_statement_begin__ = 93;
            validate_non_negative_index("nu_loc", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 94;
            validate_non_negative_index("nu_sca", "J", J);
            num_params_r__ += J;
            current_statement_begin__ = 96;
            validate_non_negative_index("theta_z", "N", N);
            validate_non_negative_index("theta_z", "(F * 2)", (F * 2));
            num_params_r__ += (N * (F * 2));
            current_statement_begin__ = 97;
            validate_non_negative_index("theta_cor_L", "(F * 2)", (F * 2));
            validate_non_negative_index("theta_cor_L", "(F * 2)", (F * 2));
            num_params_r__ += (((F * 2) * ((F * 2) - 1)) / 2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_relFactorGeneral() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 90;
        if (!(context__.contains_r("lambda_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_loc");
        pos__ = 0U;
        validate_non_negative_index("lambda_loc", "N_loadings", N_loadings);
        context__.validate_dims("parameter initialization", "lambda_loc", "row_vector_d", context__.to_vec(N_loadings));
        Eigen::Matrix<double, 1, Eigen::Dynamic> lambda_loc(N_loadings);
        size_t lambda_loc_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_loc_j_1_max__; ++j_1__) {
            lambda_loc(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_lb_unconstrain(0, lambda_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 91;
        if (!(context__.contains_r("lambda_sca")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda_sca missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda_sca");
        pos__ = 0U;
        validate_non_negative_index("lambda_sca", "N_loadings", N_loadings);
        context__.validate_dims("parameter initialization", "lambda_sca", "row_vector_d", context__.to_vec(N_loadings));
        Eigen::Matrix<double, 1, Eigen::Dynamic> lambda_sca(N_loadings);
        size_t lambda_sca_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_sca_j_1_max__; ++j_1__) {
            lambda_sca(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_lb_unconstrain(0, lambda_sca);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda_sca: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 93;
        if (!(context__.contains_r("nu_loc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_loc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_loc");
        pos__ = 0U;
        validate_non_negative_index("nu_loc", "J", J);
        context__.validate_dims("parameter initialization", "nu_loc", "row_vector_d", context__.to_vec(J));
        Eigen::Matrix<double, 1, Eigen::Dynamic> nu_loc(J);
        size_t nu_loc_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_loc_j_1_max__; ++j_1__) {
            nu_loc(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(nu_loc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_loc: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 94;
        if (!(context__.contains_r("nu_sca")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable nu_sca missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("nu_sca");
        pos__ = 0U;
        validate_non_negative_index("nu_sca", "J", J);
        context__.validate_dims("parameter initialization", "nu_sca", "row_vector_d", context__.to_vec(J));
        Eigen::Matrix<double, 1, Eigen::Dynamic> nu_sca(J);
        size_t nu_sca_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_sca_j_1_max__; ++j_1__) {
            nu_sca(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(nu_sca);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable nu_sca: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 96;
        if (!(context__.contains_r("theta_z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_z");
        pos__ = 0U;
        validate_non_negative_index("theta_z", "N", N);
        validate_non_negative_index("theta_z", "(F * 2)", (F * 2));
        context__.validate_dims("parameter initialization", "theta_z", "matrix_d", context__.to_vec(N,(F * 2)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_z(N, (F * 2));
        size_t theta_z_j_2_max__ = (F * 2);
        size_t theta_z_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < theta_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_z_j_1_max__; ++j_1__) {
                theta_z(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(theta_z);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_z: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 97;
        if (!(context__.contains_r("theta_cor_L")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_cor_L missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_cor_L");
        pos__ = 0U;
        validate_non_negative_index("theta_cor_L", "(F * 2)", (F * 2));
        validate_non_negative_index("theta_cor_L", "(F * 2)", (F * 2));
        context__.validate_dims("parameter initialization", "theta_cor_L", "matrix_d", context__.to_vec((F * 2),(F * 2)));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_cor_L((F * 2), (F * 2));
        size_t theta_cor_L_j_2_max__ = (F * 2);
        size_t theta_cor_L_j_1_max__ = (F * 2);
        for (size_t j_2__ = 0; j_2__ < theta_cor_L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_cor_L_j_1_max__; ++j_1__) {
                theta_cor_L(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.cholesky_factor_corr_unconstrain(theta_cor_L);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_cor_L: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 90;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> lambda_loc;
            (void) lambda_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_loc = in__.row_vector_lb_constrain(0, N_loadings, lp__);
            else
                lambda_loc = in__.row_vector_lb_constrain(0, N_loadings);
            current_statement_begin__ = 91;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> lambda_sca;
            (void) lambda_sca;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda_sca = in__.row_vector_lb_constrain(0, N_loadings, lp__);
            else
                lambda_sca = in__.row_vector_lb_constrain(0, N_loadings);
            current_statement_begin__ = 93;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> nu_loc;
            (void) nu_loc;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_loc = in__.row_vector_constrain(J, lp__);
            else
                nu_loc = in__.row_vector_constrain(J);
            current_statement_begin__ = 94;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> nu_sca;
            (void) nu_sca;  // dummy to suppress unused var warning
            if (jacobian__)
                nu_sca = in__.row_vector_constrain(J, lp__);
            else
                nu_sca = in__.row_vector_constrain(J);
            current_statement_begin__ = 96;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta_z;
            (void) theta_z;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_z = in__.matrix_constrain(N, (F * 2), lp__);
            else
                theta_z = in__.matrix_constrain(N, (F * 2));
            current_statement_begin__ = 97;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta_cor_L;
            (void) theta_cor_L;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_cor_L = in__.cholesky_factor_corr_constrain((F * 2), lp__);
            else
                theta_cor_L = in__.cholesky_factor_corr_constrain((F * 2));
            // transformed parameters
            current_statement_begin__ = 102;
            validate_non_negative_index("theta", "N", N);
            validate_non_negative_index("theta", "(F * 2)", (F * 2));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> theta(N, (F * 2));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,multiply(theta_z, transpose(theta_cor_L)));
            current_statement_begin__ = 103;
            validate_non_negative_index("lambda_loc_mat", "F", F);
            validate_non_negative_index("lambda_loc_mat", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda_loc_mat(F, J);
            stan::math::initialize(lambda_loc_mat, DUMMY_VAR__);
            stan::math::fill(lambda_loc_mat, DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("lambda_sca_mat", "F", F);
            validate_non_negative_index("lambda_sca_mat", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> lambda_sca_mat(F, J);
            stan::math::initialize(lambda_sca_mat, DUMMY_VAR__);
            stan::math::fill(lambda_sca_mat, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("yhat", "N", N);
            validate_non_negative_index("yhat", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> yhat(N, J);
            stan::math::initialize(yhat, DUMMY_VAR__);
            stan::math::fill(yhat, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("shat", "N", N);
            validate_non_negative_index("shat", "J", J);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> shat(N, J);
            stan::math::initialize(shat, DUMMY_VAR__);
            stan::math::fill(shat, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 109;
            for (int f = 1; f <= F; ++f) {
                current_statement_begin__ = 110;
                for (int j = 1; j <= J; ++j) {
                    current_statement_begin__ = 111;
                    stan::model::assign(lambda_loc_mat, 
                                stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable lambda_loc_mat");
                    current_statement_begin__ = 112;
                    stan::model::assign(lambda_sca_mat, 
                                stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable lambda_sca_mat");
                }
            }
            {
            current_statement_begin__ = 117;
            int count(0);
            (void) count;  // dummy to suppress unused var warning
            stan::math::fill(count, std::numeric_limits<int>::min());
            stan::math::assign(count,1);
            current_statement_begin__ = 118;
            for (int f = 1; f <= F; ++f) {
                current_statement_begin__ = 119;
                stan::model::assign(lambda_loc_mat, 
                            stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), 
                            stan::model::rvalue(lambda_loc, stan::model::cons_list(stan::model::index_min_max(count, ((count - 1) + get_base1(F_inds_num, f, "F_inds_num", 1))), stan::model::nil_index_list()), "lambda_loc"), 
                            "assigning variable lambda_loc_mat");
                current_statement_begin__ = 120;
                stan::model::assign(lambda_sca_mat, 
                            stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), 
                            stan::model::rvalue(lambda_sca, stan::model::cons_list(stan::model::index_min_max(count, ((count - 1) + get_base1(F_inds_num, f, "F_inds_num", 1))), stan::model::nil_index_list()), "lambda_sca"), 
                            "assigning variable lambda_sca_mat");
                current_statement_begin__ = 121;
                stan::math::assign(count, (count + get_base1(F_inds_num, f, "F_inds_num", 1)));
            }
            }
            current_statement_begin__ = 126;
            stan::math::assign(yhat, add(rep_matrix(nu_loc, N), multiply(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, F), stan::model::nil_index_list())), "theta"), lambda_loc_mat)));
            current_statement_begin__ = 127;
            stan::math::assign(shat, stan::math::exp(add(rep_matrix(nu_sca, N), multiply(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max((F + 1), (F * 2)), stan::model::nil_index_list())), "theta"), lambda_sca_mat))));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 102;
            size_t theta_j_1_max__ = N;
            size_t theta_j_2_max__ = (F * 2);
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(theta(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 103;
            size_t lambda_loc_mat_j_1_max__ = F;
            size_t lambda_loc_mat_j_2_max__ = J;
            for (size_t j_1__ = 0; j_1__ < lambda_loc_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < lambda_loc_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(lambda_loc_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lambda_loc_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_loc_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 104;
            size_t lambda_sca_mat_j_1_max__ = F;
            size_t lambda_sca_mat_j_2_max__ = J;
            for (size_t j_1__ = 0; j_1__ < lambda_sca_mat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < lambda_sca_mat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(lambda_sca_mat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: lambda_sca_mat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable lambda_sca_mat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 105;
            size_t yhat_j_1_max__ = N;
            size_t yhat_j_2_max__ = J;
            for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < yhat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(yhat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: yhat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable yhat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 106;
            size_t shat_j_1_max__ = N;
            size_t shat_j_2_max__ = J;
            for (size_t j_1__ = 0; j_1__ < shat_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < shat_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(shat(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: shat" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable shat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 132;
            lp_accum__.add(std_normal_log<propto__>(lambda_loc));
            current_statement_begin__ = 133;
            lp_accum__.add(std_normal_log<propto__>(lambda_sca));
            current_statement_begin__ = 134;
            lp_accum__.add(std_normal_log<propto__>(nu_loc));
            current_statement_begin__ = 135;
            lp_accum__.add(std_normal_log<propto__>(nu_sca));
            current_statement_begin__ = 136;
            lp_accum__.add(std_normal_log<propto__>(to_vector(theta_z)));
            current_statement_begin__ = 137;
            lp_accum__.add(lkj_corr_cholesky_log<propto__>(theta_cor_L, 1));
            current_statement_begin__ = 140;
            lp_accum__.add(normal_log<propto__>(to_vector(x), to_vector(yhat), to_vector(shat)));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda_loc");
        names__.push_back("lambda_sca");
        names__.push_back("nu_loc");
        names__.push_back("nu_sca");
        names__.push_back("theta_z");
        names__.push_back("theta_cor_L");
        names__.push_back("theta");
        names__.push_back("lambda_loc_mat");
        names__.push_back("lambda_sca_mat");
        names__.push_back("yhat");
        names__.push_back("shat");
        names__.push_back("omega1");
        names__.push_back("omega2");
        names__.push_back("omega1_expected");
        names__.push_back("omega2_expected");
        names__.push_back("theta_cor");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_loadings);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_loadings);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((F * 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((F * 2));
        dims__.push_back((F * 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back((F * 2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(F);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(F);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(J);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(F);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(F);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dims__.push_back(F);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dims__.push_back(F);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((F * 2));
        dims__.push_back((F * 2));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_relFactorGeneral_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, 1, Eigen::Dynamic> lambda_loc = in__.row_vector_lb_constrain(0, N_loadings);
        size_t lambda_loc_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_loc_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_loc(j_1__));
        }
        Eigen::Matrix<double, 1, Eigen::Dynamic> lambda_sca = in__.row_vector_lb_constrain(0, N_loadings);
        size_t lambda_sca_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_sca_j_1_max__; ++j_1__) {
            vars__.push_back(lambda_sca(j_1__));
        }
        Eigen::Matrix<double, 1, Eigen::Dynamic> nu_loc = in__.row_vector_constrain(J);
        size_t nu_loc_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_loc_j_1_max__; ++j_1__) {
            vars__.push_back(nu_loc(j_1__));
        }
        Eigen::Matrix<double, 1, Eigen::Dynamic> nu_sca = in__.row_vector_constrain(J);
        size_t nu_sca_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_sca_j_1_max__; ++j_1__) {
            vars__.push_back(nu_sca(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_z = in__.matrix_constrain(N, (F * 2));
        size_t theta_z_j_2_max__ = (F * 2);
        size_t theta_z_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < theta_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_z_j_1_max__; ++j_1__) {
                vars__.push_back(theta_z(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_cor_L = in__.cholesky_factor_corr_constrain((F * 2));
        size_t theta_cor_L_j_2_max__ = (F * 2);
        size_t theta_cor_L_j_1_max__ = (F * 2);
        for (size_t j_2__ = 0; j_2__ < theta_cor_L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_cor_L_j_1_max__; ++j_1__) {
                vars__.push_back(theta_cor_L(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 102;
            validate_non_negative_index("theta", "N", N);
            validate_non_negative_index("theta", "(F * 2)", (F * 2));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta(N, (F * 2));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);
            stan::math::assign(theta,multiply(theta_z, transpose(theta_cor_L)));
            current_statement_begin__ = 103;
            validate_non_negative_index("lambda_loc_mat", "F", F);
            validate_non_negative_index("lambda_loc_mat", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda_loc_mat(F, J);
            stan::math::initialize(lambda_loc_mat, DUMMY_VAR__);
            stan::math::fill(lambda_loc_mat, DUMMY_VAR__);
            current_statement_begin__ = 104;
            validate_non_negative_index("lambda_sca_mat", "F", F);
            validate_non_negative_index("lambda_sca_mat", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> lambda_sca_mat(F, J);
            stan::math::initialize(lambda_sca_mat, DUMMY_VAR__);
            stan::math::fill(lambda_sca_mat, DUMMY_VAR__);
            current_statement_begin__ = 105;
            validate_non_negative_index("yhat", "N", N);
            validate_non_negative_index("yhat", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> yhat(N, J);
            stan::math::initialize(yhat, DUMMY_VAR__);
            stan::math::fill(yhat, DUMMY_VAR__);
            current_statement_begin__ = 106;
            validate_non_negative_index("shat", "N", N);
            validate_non_negative_index("shat", "J", J);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> shat(N, J);
            stan::math::initialize(shat, DUMMY_VAR__);
            stan::math::fill(shat, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 109;
            for (int f = 1; f <= F; ++f) {
                current_statement_begin__ = 110;
                for (int j = 1; j <= J; ++j) {
                    current_statement_begin__ = 111;
                    stan::model::assign(lambda_loc_mat, 
                                stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable lambda_loc_mat");
                    current_statement_begin__ = 112;
                    stan::model::assign(lambda_sca_mat, 
                                stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                0, 
                                "assigning variable lambda_sca_mat");
                }
            }
            {
            current_statement_begin__ = 117;
            int count(0);
            (void) count;  // dummy to suppress unused var warning
            stan::math::fill(count, std::numeric_limits<int>::min());
            stan::math::assign(count,1);
            current_statement_begin__ = 118;
            for (int f = 1; f <= F; ++f) {
                current_statement_begin__ = 119;
                stan::model::assign(lambda_loc_mat, 
                            stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), 
                            stan::model::rvalue(lambda_loc, stan::model::cons_list(stan::model::index_min_max(count, ((count - 1) + get_base1(F_inds_num, f, "F_inds_num", 1))), stan::model::nil_index_list()), "lambda_loc"), 
                            "assigning variable lambda_loc_mat");
                current_statement_begin__ = 120;
                stan::model::assign(lambda_sca_mat, 
                            stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_multi(stan::model::rvalue(F_inds, stan::model::cons_list(stan::model::index_uni(f), stan::model::cons_list(stan::model::index_min_max(1, get_base1(F_inds_num, f, "F_inds_num", 1)), stan::model::nil_index_list())), "F_inds")), stan::model::nil_index_list())), 
                            stan::model::rvalue(lambda_sca, stan::model::cons_list(stan::model::index_min_max(count, ((count - 1) + get_base1(F_inds_num, f, "F_inds_num", 1))), stan::model::nil_index_list()), "lambda_sca"), 
                            "assigning variable lambda_sca_mat");
                current_statement_begin__ = 121;
                stan::math::assign(count, (count + get_base1(F_inds_num, f, "F_inds_num", 1)));
            }
            }
            current_statement_begin__ = 126;
            stan::math::assign(yhat, add(rep_matrix(nu_loc, N), multiply(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, F), stan::model::nil_index_list())), "theta"), lambda_loc_mat)));
            current_statement_begin__ = 127;
            stan::math::assign(shat, stan::math::exp(add(rep_matrix(nu_sca, N), multiply(stan::model::rvalue(theta, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max((F + 1), (F * 2)), stan::model::nil_index_list())), "theta"), lambda_sca_mat))));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t theta_j_2_max__ = (F * 2);
                size_t theta_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                        vars__.push_back(theta(j_1__, j_2__));
                    }
                }
                size_t lambda_loc_mat_j_2_max__ = J;
                size_t lambda_loc_mat_j_1_max__ = F;
                for (size_t j_2__ = 0; j_2__ < lambda_loc_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < lambda_loc_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(lambda_loc_mat(j_1__, j_2__));
                    }
                }
                size_t lambda_sca_mat_j_2_max__ = J;
                size_t lambda_sca_mat_j_1_max__ = F;
                for (size_t j_2__ = 0; j_2__ < lambda_sca_mat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < lambda_sca_mat_j_1_max__; ++j_1__) {
                        vars__.push_back(lambda_sca_mat(j_1__, j_2__));
                    }
                }
                size_t yhat_j_2_max__ = J;
                size_t yhat_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < yhat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
                        vars__.push_back(yhat(j_1__, j_2__));
                    }
                }
                size_t shat_j_2_max__ = J;
                size_t shat_j_1_max__ = N;
                for (size_t j_2__ = 0; j_2__ < shat_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < shat_j_1_max__; ++j_1__) {
                        vars__.push_back(shat(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 145;
            validate_non_negative_index("omega1", "N", N);
            validate_non_negative_index("omega1", "F", F);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> omega1(N, F);
            stan::math::initialize(omega1, DUMMY_VAR__);
            stan::math::fill(omega1, DUMMY_VAR__);
            stan::math::assign(omega1,omega_one(lambda_loc_mat, F_inds, F_inds_num, shat, pstream__));
            current_statement_begin__ = 147;
            validate_non_negative_index("omega2", "N", N);
            validate_non_negative_index("omega2", "F", F);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> omega2(N, F);
            stan::math::initialize(omega2, DUMMY_VAR__);
            stan::math::fill(omega2, DUMMY_VAR__);
            stan::math::assign(omega2,omega_two(lambda_loc_mat, F_inds, F_inds_num, theta_cor_L, shat, pstream__));
            current_statement_begin__ = 148;
            validate_non_negative_index("omega1_expected", "1", 1);
            validate_non_negative_index("omega1_expected", "F", F);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> omega1_expected(1, F);
            stan::math::initialize(omega1_expected, DUMMY_VAR__);
            stan::math::fill(omega1_expected, DUMMY_VAR__);
            stan::math::assign(omega1_expected,omega_one(lambda_loc_mat, F_inds, F_inds_num, stan::math::exp(rep_matrix(nu_sca, 1)), pstream__));
            current_statement_begin__ = 149;
            validate_non_negative_index("omega2_expected", "1", 1);
            validate_non_negative_index("omega2_expected", "F", F);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> omega2_expected(1, F);
            stan::math::initialize(omega2_expected, DUMMY_VAR__);
            stan::math::fill(omega2_expected, DUMMY_VAR__);
            stan::math::assign(omega2_expected,omega_two(lambda_loc_mat, F_inds, F_inds_num, theta_cor_L, stan::math::exp(rep_matrix(nu_sca, 1)), pstream__));
            current_statement_begin__ = 150;
            validate_non_negative_index("theta_cor", "(F * 2)", (F * 2));
            validate_non_negative_index("theta_cor", "(F * 2)", (F * 2));
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> theta_cor((F * 2), (F * 2));
            stan::math::initialize(theta_cor, DUMMY_VAR__);
            stan::math::fill(theta_cor, DUMMY_VAR__);
            stan::math::assign(theta_cor,multiply_lower_tri_self_transpose(theta_cor_L));
            // validate, write generated quantities
            current_statement_begin__ = 145;
            size_t omega1_j_2_max__ = F;
            size_t omega1_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < omega1_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < omega1_j_1_max__; ++j_1__) {
                    vars__.push_back(omega1(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 147;
            size_t omega2_j_2_max__ = F;
            size_t omega2_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < omega2_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < omega2_j_1_max__; ++j_1__) {
                    vars__.push_back(omega2(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 148;
            size_t omega1_expected_j_2_max__ = F;
            size_t omega1_expected_j_1_max__ = 1;
            for (size_t j_2__ = 0; j_2__ < omega1_expected_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < omega1_expected_j_1_max__; ++j_1__) {
                    vars__.push_back(omega1_expected(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 149;
            size_t omega2_expected_j_2_max__ = F;
            size_t omega2_expected_j_1_max__ = 1;
            for (size_t j_2__ = 0; j_2__ < omega2_expected_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < omega2_expected_j_1_max__; ++j_1__) {
                    vars__.push_back(omega2_expected(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 150;
            size_t theta_cor_j_2_max__ = (F * 2);
            size_t theta_cor_j_1_max__ = (F * 2);
            for (size_t j_2__ = 0; j_2__ < theta_cor_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_cor_j_1_max__; ++j_1__) {
                    vars__.push_back(theta_cor(j_1__, j_2__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_relFactorGeneral";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_loc_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_loc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_loc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_sca_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_sca_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_sca" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_loc_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_loc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_loc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_sca_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_sca_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_sca" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_z_j_2_max__ = (F * 2);
        size_t theta_z_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < theta_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_cor_L_j_2_max__ = (F * 2);
        size_t theta_cor_L_j_1_max__ = (F * 2);
        for (size_t j_2__ = 0; j_2__ < theta_cor_L_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_cor_L_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_cor_L" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_2_max__ = (F * 2);
            size_t theta_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t lambda_loc_mat_j_2_max__ = J;
            size_t lambda_loc_mat_j_1_max__ = F;
            for (size_t j_2__ = 0; j_2__ < lambda_loc_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_loc_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda_loc_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t lambda_sca_mat_j_2_max__ = J;
            size_t lambda_sca_mat_j_1_max__ = F;
            for (size_t j_2__ = 0; j_2__ < lambda_sca_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_sca_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda_sca_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t yhat_j_2_max__ = J;
            size_t yhat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < yhat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "yhat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t shat_j_2_max__ = J;
            size_t shat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < shat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < shat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "shat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t omega1_j_2_max__ = F;
        size_t omega1_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < omega1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega2_j_2_max__ = F;
        size_t omega2_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < omega2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega1_expected_j_2_max__ = F;
        size_t omega1_expected_j_1_max__ = 1;
        for (size_t j_2__ = 0; j_2__ < omega1_expected_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega1_expected_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega1_expected" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega2_expected_j_2_max__ = F;
        size_t omega2_expected_j_1_max__ = 1;
        for (size_t j_2__ = 0; j_2__ < omega2_expected_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega2_expected_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega2_expected" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_cor_j_2_max__ = (F * 2);
        size_t theta_cor_j_1_max__ = (F * 2);
        for (size_t j_2__ = 0; j_2__ < theta_cor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_cor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_cor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t lambda_loc_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_loc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_loc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t lambda_sca_j_1_max__ = N_loadings;
        for (size_t j_1__ = 0; j_1__ < lambda_sca_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda_sca" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_loc_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_loc_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_loc" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t nu_sca_j_1_max__ = J;
        for (size_t j_1__ = 0; j_1__ < nu_sca_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "nu_sca" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t theta_z_j_2_max__ = (F * 2);
        size_t theta_z_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < theta_z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_cor_L_j_1_max__ = (((F * 2) * ((F * 2) - 1)) / 2);
        for (size_t j_1__ = 0; j_1__ < theta_cor_L_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_cor_L" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t theta_j_2_max__ = (F * 2);
            size_t theta_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < theta_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t lambda_loc_mat_j_2_max__ = J;
            size_t lambda_loc_mat_j_1_max__ = F;
            for (size_t j_2__ = 0; j_2__ < lambda_loc_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_loc_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda_loc_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t lambda_sca_mat_j_2_max__ = J;
            size_t lambda_sca_mat_j_1_max__ = F;
            for (size_t j_2__ = 0; j_2__ < lambda_sca_mat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < lambda_sca_mat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "lambda_sca_mat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t yhat_j_2_max__ = J;
            size_t yhat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < yhat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "yhat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t shat_j_2_max__ = J;
            size_t shat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < shat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < shat_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "shat" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
        size_t omega1_j_2_max__ = F;
        size_t omega1_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < omega1_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega1_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega1" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega2_j_2_max__ = F;
        size_t omega2_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < omega2_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega2_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega2" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega1_expected_j_2_max__ = F;
        size_t omega1_expected_j_1_max__ = 1;
        for (size_t j_2__ = 0; j_2__ < omega1_expected_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega1_expected_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega1_expected" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t omega2_expected_j_2_max__ = F;
        size_t omega2_expected_j_1_max__ = 1;
        for (size_t j_2__ = 0; j_2__ < omega2_expected_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < omega2_expected_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "omega2_expected" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t theta_cor_j_2_max__ = (F * 2);
        size_t theta_cor_j_1_max__ = (F * 2);
        for (size_t j_2__ = 0; j_2__ < theta_cor_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < theta_cor_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_cor" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
    }
}; // model
}  // namespace
typedef model_relFactorGeneral_namespace::model_relFactorGeneral stan_model;
#endif
